# Retrieve name of example and output directory
if length(ARGS) != 2
    error("please specify the name of the example and the output directory")
end
const EXAMPLE = ARGS[1]
const OUTDIR = ARGS[2]

# Activate environment
# Note that each example's Project.toml must include Literate as a dependency
using Pkg: Pkg

using InteractiveUtils
const EXAMPLEPATH = joinpath(@__DIR__, "..", "examples", EXAMPLE)
Pkg.activate(EXAMPLEPATH)
Pkg.instantiate()
pkg_status = sprint() do io
    Pkg.status(; io=io)
end
manifest_status = sprint() do io
    Pkg.status(; io=io, mode=Pkg.PKGMODE_MANIFEST)
end

using Literate: Literate

const MANIFEST_OUT = joinpath(EXAMPLE, "Manifest.toml")
mkpath(joinpath(OUTDIR, EXAMPLE))
cp(joinpath(EXAMPLEPATH, "Manifest.toml"), joinpath(OUTDIR, MANIFEST_OUT); force=true)

function preprocess(content)
    # Add link to nbviewer below the first heading of level 1
    sub = SubstitutionString(
        """
#md # ```@meta
#md # EditURL = "@__REPO_ROOT_URL__/examples/@__NAME__/script.jl"
#md # ```
#md #
\\0
#
#md # [![](https://img.shields.io/badge/show-nbviewer-579ACA.svg)](@__NBVIEWER_ROOT_URL__/examples/@__NAME__.ipynb)
#md #
# *You are seeing the
#md # HTML output generated by [Documenter.jl](https://github.com/JuliaDocs/Documenter.jl) and
#nb # notebook output generated by
# [Literate.jl](https://github.com/fredrikekre/Literate.jl) from the
# [Julia source file](@__REPO_ROOT_URL__/examples/@__NAME__/script.jl).
#md # The corresponding notebook can be viewed in [nbviewer](@__NBVIEWER_ROOT_URL__/examples/@__NAME__.ipynb).*
#nb # The rendered HTML can be viewed [in the docs](https://juliagaussianprocesses.github.io/ApproximateGPs.jl/dev/examples/@__NAME__/).*
#
        """,
    )
    content = replace(content, r"^# # [^\n]*"m => sub; count=1)

    # remove VSCode `##` block delimiter lines
    content = replace(content, r"^##$."ms => "")

    # adds the current version of the packages
    append = """
    # ### Package and system information
    # #### Package version
    # ```julia
    $(chomp(replace(pkg_status, r"^"m => "# ")))
    # ```
    # #### Computer information
    # ```
    $(chomp(replace(sprint(InteractiveUtils.versioninfo), r"^"m => "# ")))
    # ```
    # #### Manifest
    # To reproduce this notebook's package environment, you can [download the full Manifest.toml]($(MANIFEST_OUT)).
    """
    # This regex add "# " at the beginning of each line
    # chomp removes trailing newlines

    # The following gives a preview of the manifest
    # embedded in a "spoiler", but this is unfortunately very buggy
    # ```@raw html
    # <details>
    # <summary> Show the full Manifest </summary>
    # ```
    # ```julia
    # $(chomp(replace(manifest_status, r"^"m => "# ")))
    # ```
    # ```@raw html
    # </details>
    # ```

    return content * append
end

# Convert to markdown and notebook
const SCRIPTJL = joinpath(EXAMPLEPATH, "script.jl")
Literate.markdown(
    SCRIPTJL,
    OUTDIR;
    name=EXAMPLE,
    execute=true,
    preprocess=preprocess,
)
Literate.notebook(
    SCRIPTJL, OUTDIR; name=EXAMPLE, execute=true, preprocess=preprocess
)
