# Retrieve name of example and output directory
if length(ARGS) != 2
    error("please specify the name of the example and the output directory")
end
const EXAMPLE = ARGS[1]
const OUTDIR = ARGS[2]

# Activate environment
# Note that each example's Project.toml must include Literate as a dependency
using Pkg: Pkg

using InteractiveUtils
const EXAMPLEPATH = joinpath(@__DIR__, "..", "examples", EXAMPLE)
const PKGDIR = joinpath(@__DIR__, "..")
Pkg.activate(EXAMPLEPATH)
Pkg.instantiate()
pkg_status = sprint() do io
    Pkg.status(; io=io)
end
Pkg.develop(Pkg.PackageSpec(path=PKGDIR))

using Literate: Literate

const MANIFEST_OUT = joinpath(EXAMPLE, "Manifest.toml")
mkpath(joinpath(OUTDIR, EXAMPLE))
cp(joinpath(EXAMPLEPATH, "Manifest.toml"), joinpath(OUTDIR, MANIFEST_OUT); force=true)

using Markdown: htmlesc

function preprocess(content)
    # Add link to nbviewer below the first heading of level 1
    sub = SubstitutionString(
        """
#md # ```@meta
#md # EditURL = "@__REPO_ROOT_URL__/examples/@__NAME__/script.jl"
#md # ```
#md #
\\0
#
#md # [![](https://img.shields.io/badge/show-nbviewer-579ACA.svg)](@__NBVIEWER_ROOT_URL__/examples/@__NAME__.ipynb)
#md #
# *You are seeing the
#md # HTML output generated by [Documenter.jl](https://github.com/JuliaDocs/Documenter.jl) and
#nb # notebook output generated by
# [Literate.jl](https://github.com/fredrikekre/Literate.jl) from the
# [Julia source file](@__REPO_ROOT_URL__/examples/@__NAME__/script.jl).
#md # The corresponding notebook can be viewed in [nbviewer](@__NBVIEWER_ROOT_URL__/examples/@__NAME__.ipynb).*
#nb # The rendered HTML can be viewed [in the docs](https://juliagaussianprocesses.github.io/ApproximateGPs.jl/dev/examples/@__NAME__/).*
#
#md # ---
#
        """,
    )
    content = replace(content, r"^# # [^\n]*"m => sub; count=1)

    # remove VSCode `##` block delimiter lines
    content = replace(content, r"^##$."ms => "")

    """ The regex adds "# " at the beginning of each line; chomp removes trailing newlines """
    literate_format(s) = chomp(replace(s, r"^"m => "# "))

    # <details></details> seems to be buggy in the notebook, so is avoided for now
    info_footer = """
    #md # ```@raw html
    # <hr />
    # <h6>Package and system information</h6>
    # <details>
    # <summary>Package information (click to expand)</summary>
    # <pre>
    $(literate_format(htmlesc(pkg_status)))
    # </pre>
    # To reproduce this notebook's package environment, you can
    #nb # <a href="$(MANIFEST_OUT)">
    #md # <a href="../$(MANIFEST_OUT)">
    # download the full Manifest.toml</a>.
    # </details>
    # <details>
    # <summary>System information (click to expand)</summary>
    # <pre>
    $(literate_format(htmlesc(sprint(InteractiveUtils.versioninfo))))
    # </pre>
    # </details>
    #md # ```
    """

    return content * info_footer
end

# Convert to markdown and notebook
const SCRIPTJL = joinpath(EXAMPLEPATH, "script.jl")
Literate.markdown(SCRIPTJL, OUTDIR; name=EXAMPLE, execute=true, preprocess=preprocess)
Literate.notebook(SCRIPTJL, OUTDIR; name=EXAMPLE, execute=true, preprocess=preprocess)
